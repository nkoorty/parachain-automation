diff --git a/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js b/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js
index 79148bd..74ffc5d 100644
--- a/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js
+++ b/node_modules/hardhat/internal/hardhat-network/jsonrpc/client.js
@@ -148,58 +148,98 @@ class JsonRpcClient {
     async getLatestBlockNumber() {
         return this._perform("eth_blockNumber", [], base_types_1.rpcQuantity, (blockNumber) => blockNumber);
     }
-    async _perform(method, params, tType, getMaxAffectedBlockNumber) {
-        const cacheKey = this._getCacheKey(method, params);
-        const cachedResult = this._getFromCache(cacheKey);
-        if (cachedResult !== undefined) {
-            return cachedResult;
-        }
-        if (this._forkCachePath !== undefined) {
-            const diskCachedResult = await this._getFromDiskCache(this._forkCachePath, cacheKey, tType);
-            if (diskCachedResult !== undefined) {
-                this._storeInCache(cacheKey, diskCachedResult);
-                return diskCachedResult;
-            }
-        }
-        const rawResult = await this._send(method, params);
-        const decodedResult = (0, decodeJsonRpcResponse_1.decodeJsonRpcResponse)(rawResult, tType);
-        const blockNumber = getMaxAffectedBlockNumber(decodedResult);
-        if (this._canBeCached(blockNumber)) {
-            this._storeInCache(cacheKey, decodedResult);
-            if (this._forkCachePath !== undefined) {
-                await this._storeInDiskCache(this._forkCachePath, cacheKey, rawResult);
-            }
-        }
-        return decodedResult;
-    }
-    async _performBatch(batch, getMaxAffectedBlockNumber) {
-        // Perform Batch caches the entire batch at once.
-        // It could implement something more clever, like caching per request
-        // but it's only used in one place, and those other requests aren't
-        // used anywhere else.
-        const cacheKey = this._getBatchCacheKey(batch);
-        const cachedResult = this._getFromCache(cacheKey);
-        if (cachedResult !== undefined) {
-            return cachedResult;
-        }
-        if (this._forkCachePath !== undefined) {
-            const diskCachedResult = await this._getBatchFromDiskCache(this._forkCachePath, cacheKey, batch.map((b) => b.tType));
-            if (diskCachedResult !== undefined) {
-                this._storeInCache(cacheKey, diskCachedResult);
-                return diskCachedResult;
-            }
-        }
-        const rawResults = await this._sendBatch(batch);
-        const decodedResults = rawResults.map((result, i) => (0, decodeJsonRpcResponse_1.decodeJsonRpcResponse)(result, batch[i].tType));
-        const blockNumber = getMaxAffectedBlockNumber(decodedResults);
-        if (this._canBeCached(blockNumber)) {
-            this._storeInCache(cacheKey, decodedResults);
-            if (this._forkCachePath !== undefined) {
-                await this._storeInDiskCache(this._forkCachePath, cacheKey, rawResults);
-            }
-        }
-        return decodedResults;
+  addAccessList(method, rawResult) {
+    if (
+      method.startsWith('eth_getBlock') &&
+      rawResult &&
+      rawResult.transactions?.length
+    ) {
+      rawResult.transactions.forEach((t) => {
+        if (t.accessList == null) t.accessList = [];
+      });
+    }
+  }
+  addAccessList(method, rawResult) {
+    if (
+      method.startsWith('eth_getBlock') &&
+      rawResult &&
+      rawResult.transactions?.length
+    ) {
+      rawResult.transactions.forEach((t) => {
+        if (t.accessList == null) t.accessList = [];
+      });
+    }
+  }
+  async _perform(method, params, tType, getMaxAffectedBlockNumber) {
+    const cacheKey = this._getCacheKey(method, params);
+    const cachedResult = this._getFromCache(cacheKey);
+    if (cachedResult !== undefined) {
+      return cachedResult;
+    }
+    if (this._forkCachePath !== undefined) {
+      const diskCachedResult = await this._getFromDiskCache(
+        this._forkCachePath,
+        cacheKey,
+        tType
+      );
+      if (diskCachedResult !== undefined) {
+        this._storeInCache(cacheKey, diskCachedResult);
+        return diskCachedResult;
+      }
+    }
+    const rawResult = await this._send(method, params);
+    this.addAccessList(method, rawResult);
+    const decodedResult = (0, decodeJsonRpcResponse_1.decodeJsonRpcResponse)(
+      rawResult,
+      tType
+    );
+    const blockNumber = getMaxAffectedBlockNumber(decodedResult);
+    if (this._canBeCached(blockNumber)) {
+      this._storeInCache(cacheKey, decodedResult);
+      if (this._forkCachePath !== undefined) {
+        await this._storeInDiskCache(this._forkCachePath, cacheKey, rawResult);
+      }
+    }
+    return decodedResult;
+  }
+  async _performBatch(batch, getMaxAffectedBlockNumber) {
+    // Perform Batch caches the entire batch at once.
+    // It could implement something more clever, like caching per request
+    // but it's only used in one place, and those other requests aren't
+    // used anywhere else.
+    const cacheKey = this._getBatchCacheKey(batch);
+    const cachedResult = this._getFromCache(cacheKey);
+    if (cachedResult !== undefined) {
+      return cachedResult;
+    }
+    if (this._forkCachePath !== undefined) {
+      const diskCachedResult = await this._getBatchFromDiskCache(
+        this._forkCachePath,
+        cacheKey,
+        batch.map((b) => b.tType)
+      );
+      if (diskCachedResult !== undefined) {
+        this._storeInCache(cacheKey, diskCachedResult);
+        return diskCachedResult;
+      }
+    }
+    const rawResults = await this._sendBatch(batch);
+    const decodedResults = rawResults.map((result, i) => {
+      this.addAccessList(batch[i].method, result);
+      return (0, decodeJsonRpcResponse_1.decodeJsonRpcResponse)(
+        result,
+        batch[i].tType
+      );
+    });
+    const blockNumber = getMaxAffectedBlockNumber(decodedResults);
+    if (this._canBeCached(blockNumber)) {
+      this._storeInCache(cacheKey, decodedResults);
+      if (this._forkCachePath !== undefined) {
+        await this._storeInDiskCache(this._forkCachePath, cacheKey, rawResults);
+      }
     }
+    return decodedResults;
+  }
     async _send(method, params, isRetryCall = false) {
         try {
             return await this._httpProvider.request({ method, params });
